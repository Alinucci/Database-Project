/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package javaapplication8;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import javax.swing.JOptionPane;
/**
 *
 * @author мечта
 */
public class info extends javax.swing.JFrame {
Connection conn = null;
ResultSet rs = null;
PreparedStatement pst = null;
    /**
     * Creates new form info
     */
    public info() {
        initComponents();
        Toolkit toolkit = getToolkit();
        Dimension size = toolkit.getScreenSize();
        setLocation(size.width/2 - getWidth()/2, size.height/2 - getHeight()/2); 
        conn = db.java_db();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        txt_p1 = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        txt_area = new javax.swing.JTextArea();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        txt_p2 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        txt_state = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jButton7 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jButton3.setText(">Avg Salary");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Submit");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jLabel1.setText("Start Price:");

        txt_area.setRows(10);
        txt_area.setTabSize(4);
        jScrollPane1.setViewportView(txt_area);

        jButton1.setText("Max Car");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Min Car");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel2.setText("End Priece:");

        jButton5.setText("<Avg Salary");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton6.setText("All Car");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jLabel4.setText("State:");

        jButton7.setText("Submit");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 470, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton1)
                    .addComponent(jButton2)
                    .addComponent(jButton5)
                    .addComponent(jButton3)
                    .addComponent(jButton6))
                .addContainerGap(75, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButton4)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txt_p2)
                            .addComponent(txt_p1, javax.swing.GroupLayout.DEFAULT_SIZE, 217, Short.MAX_VALUE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txt_state, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jButton7, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(63, 63, 63))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txt_p1, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1))
                        .addGap(8, 8, 8)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txt_p2, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton4))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txt_state, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton7)))
                .addGap(18, 18, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton6))
                    .addComponent(jScrollPane1))
                .addGap(8, 8, 8))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        try{
            CallableStatement cstmt = conn.prepareCall("{call dbms_output.enable(32000) }");
            cstmt.execute();

            Statement stmt = conn.createStatement();
            String sql =
            "declare  \n" +
            " CURSOR cur_emps IS SELECT ID,brand, model, year, price FROM cars where price > (select avg(price) from cars);  \n" +
            " v_emps_record cur_emps%ROWTYPE;  \n" +
            "begin  \n" +
            "  OPEN cur_emps; \n" +
            "  loop \n" +
            "    FETCH cur_emps INTO v_emps_record;  \n" +
            "    EXIT WHEN cur_emps%NOTFOUND;  \n" +
            "    DBMS_OUTPUT.PUT_LINE('ID: ' || v_emps_record.id || '    Brand: ' || v_emps_record.brand || '  ' || v_emps_record.model || '    Year:' || v_emps_record.year || '    Price:' || v_emps_record.price); \n" +
            "  end loop; \n" +
            "   CLOSE cur_emps; \n" +
            "end;";
            stmt.execute(sql);

            // retrieve the messages written with dbms_output
            cstmt = conn.prepareCall("{call dbms_output.get_line(?,?)}");
            cstmt.registerOutParameter(1,java.sql.Types.VARCHAR);
            cstmt.registerOutParameter(2,java.sql.Types.VARCHAR);

            int status = 0;
            while (status == 0)
            {
                cstmt.execute();
                String line = cstmt.getString(1);
                status = cstmt.getInt(2);
                if (line != null && status == 0)
                {
                    //        System.out.println(line);
                    txt_area.append(line);
                    txt_area.append("\n");
                }
            }
        }catch(Exception e){
            JOptionPane.showMessageDialog(null, e);
        }

    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:

        try{
            CallableStatement cstmt = conn.prepareCall("{call dbms_output.enable(32000) }");
            cstmt.execute();

            String value = txt_p1.getText();
            String value1 = txt_p2.getText();

            Statement stmt = conn.createStatement();
            String sql =
            "declare  \n" +
            " CURSOR cur_emps IS SELECT ID,brand, model, year FROM cars where price > '"+value+"' and price < '"+value1+"';  \n" +
            " v_emps_record cur_emps%ROWTYPE;  \n" +
            "begin  \n" +
            "  OPEN cur_emps; \n" +
            "  loop \n" +
            "    FETCH cur_emps INTO v_emps_record;  \n" +
            "    EXIT WHEN cur_emps%NOTFOUND;  \n" +
            "    DBMS_OUTPUT.PUT_LINE('ID: ' || v_emps_record.id || '    Brand: ' || v_emps_record.brand || '  ' || v_emps_record.model || '    Year:' || v_emps_record.year); \n" +
            "  end loop; \n" +
            "   CLOSE cur_emps; \n" +
            "end;";
            stmt.execute(sql);

            // retrieve the messages written with dbms_output
            cstmt = conn.prepareCall("{call dbms_output.get_line(?,?)}");
            cstmt.registerOutParameter(1,java.sql.Types.VARCHAR);
            cstmt.registerOutParameter(2,java.sql.Types.VARCHAR);

            int status = 0;
            while (status == 0)
            {
                cstmt.execute();
                String line = cstmt.getString(1);
                status = cstmt.getInt(2);
                if (line != null && status == 0)
                {
                    //        System.out.println(line);
                    txt_area.append(line);
                    txt_area.append("\n");
                }
            }
        }catch(Exception e){
            JOptionPane.showMessageDialog(null, e);
        }

    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:

        try{
            CallableStatement cstmt = conn.prepareCall("{call dbms_output.enable(32000) }");
            cstmt.execute();

            Statement stmt = conn.createStatement();
            String sql =
            "declare  \n" +
            " CURSOR cur_emps IS SELECT ID,brand, model, year, price FROM cars where price = (select max(price) from cars);  \n" +
            " v_emps_record cur_emps%ROWTYPE;  \n" +
            "begin  \n" +
            "  OPEN cur_emps; \n" +
            "  loop \n" +
            "    FETCH cur_emps INTO v_emps_record;  \n" +
            "    EXIT WHEN cur_emps%NOTFOUND;  \n" +
            "    DBMS_OUTPUT.PUT_LINE('ID: ' || v_emps_record.id || '    Brand: ' || v_emps_record.brand || '  ' || v_emps_record.model || '    Year:' || v_emps_record.year || '    Price:' || v_emps_record.price); \n" +
            "  end loop; \n" +
            "   CLOSE cur_emps; \n" +
            "end;";
            stmt.execute(sql);

            // retrieve the messages written with dbms_output
            cstmt = conn.prepareCall("{call dbms_output.get_line(?,?)}");
            cstmt.registerOutParameter(1,java.sql.Types.VARCHAR);
            cstmt.registerOutParameter(2,java.sql.Types.VARCHAR);

            int status = 0;
            while (status == 0)
            {
                cstmt.execute();
                String line = cstmt.getString(1);
                status = cstmt.getInt(2);
                if (line != null && status == 0)
                {
                    //        System.out.println(line);
                    txt_area.setText(line);
                }
            }
        }catch(Exception e){
            JOptionPane.showMessageDialog(null, e);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:

        try{
            CallableStatement cstmt = conn.prepareCall("{call dbms_output.enable(32000) }");
            cstmt.execute();

            Statement stmt = conn.createStatement();
            String sql =
            "declare  \n" +
            " CURSOR cur_emps IS SELECT ID,brand, model, year, price FROM cars where price = (select min(price) from cars);  \n" +
            " v_emps_record cur_emps%ROWTYPE;  \n" +
            "begin  \n" +
            "  OPEN cur_emps; \n" +
            "  loop \n" +
            "    FETCH cur_emps INTO v_emps_record;  \n" +
            "    EXIT WHEN cur_emps%NOTFOUND;  \n" +
            "    DBMS_OUTPUT.PUT_LINE('ID: ' || v_emps_record.id || '    Brand: ' || v_emps_record.brand || '  ' || v_emps_record.model || '    Year:' || v_emps_record.year || '    Price:' || v_emps_record.price); \n" +
            "  end loop; \n" +
            "   CLOSE cur_emps; \n" +
            "end;";
            stmt.execute(sql);

            // retrieve the messages written with dbms_output
            cstmt = conn.prepareCall("{call dbms_output.get_line(?,?)}");
            cstmt.registerOutParameter(1,java.sql.Types.VARCHAR);
            cstmt.registerOutParameter(2,java.sql.Types.VARCHAR);

            int status = 0;
            while (status == 0)
            {
                cstmt.execute();
                String line = cstmt.getString(1);
                status = cstmt.getInt(2);
                if (line != null && status == 0)
                {
                    //        System.out.println(line);
                    txt_area.setText(line);
                }
            }
        }catch(Exception e){
            JOptionPane.showMessageDialog(null, e);
        }

    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        try{
            CallableStatement cstmt = conn.prepareCall("{call dbms_output.enable(32000) }");
            cstmt.execute();

            Statement stmt = conn.createStatement();
            String sql =
            "declare  \n" +
            " CURSOR cur_emps IS SELECT ID,brand, model, year, price FROM cars where price < (select avg(price) from cars);  \n" +
            " v_emps_record cur_emps%ROWTYPE;  \n" +
            "begin  \n" +
            "  OPEN cur_emps; \n" +
            "  loop \n" +
            "    FETCH cur_emps INTO v_emps_record;  \n" +
            "    EXIT WHEN cur_emps%NOTFOUND;  \n" +
            "    DBMS_OUTPUT.PUT_LINE('ID: ' || v_emps_record.id || '    Brand: ' || v_emps_record.brand || '  ' || v_emps_record.model || '    Year:' || v_emps_record.year || '    Price:' || v_emps_record.price); \n" +
            "  end loop; \n" +
            "   CLOSE cur_emps; \n" +
            "end;";
            stmt.execute(sql);

            // retrieve the messages written with dbms_output
            cstmt = conn.prepareCall("{call dbms_output.get_line(?,?)}");
            cstmt.registerOutParameter(1,java.sql.Types.VARCHAR);
            cstmt.registerOutParameter(2,java.sql.Types.VARCHAR);

            int status = 0;
            while (status == 0)
            {
                cstmt.execute();
                String line = cstmt.getString(1);
                status = cstmt.getInt(2);
                if (line != null && status == 0)
                {
                    //        System.out.println(line);
                    txt_area.append(line);
                    txt_area.append("\n");
                }
            }
        }catch(Exception e){
            JOptionPane.showMessageDialog(null, e);
        }

        
        
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // TODO add your handling code here:
        try{
            CallableStatement cstmt = conn.prepareCall("{call dbms_output.enable(32000) }");
            cstmt.execute();

            Statement stmt = conn.createStatement();
            String sql =
            "declare  \n" +
            " CURSOR c_id is select id, state from cars; \n" +
            " TYPE c_list IS TABLE of cars.id%type INDEX BY binary_integer;  \n" +
            "  id_list c_list;  \n" +
            "TYPE c_state IS TABLE of cars.state%type INDEX BY binary_integer; \n"+
            "state_list c_state; \n"+
            "counter integer :=0; \n" +
            "begin  \n" +
            "    FOR n IN c_id LOOP  \n" +
            "    counter := counter +1;  \n" +
            "    id_list(counter) := n.id;  \n" +
                    "state_list(counter) := n.state; \n "+
            "    dbms_output.put_line('ID('||counter||'):  '||id_list(counter) || '    ' || state_list(counter));  \n" +
            "  end loop; \n" +
            "end;";
            stmt.execute(sql);

            // retrieve the messages written with dbms_output
            cstmt = conn.prepareCall("{call dbms_output.get_line(?,?)}");
            cstmt.registerOutParameter(1,java.sql.Types.VARCHAR);
            cstmt.registerOutParameter(2,java.sql.Types.VARCHAR);

            int status = 0;
            while (status == 0)
            {
                cstmt.execute();
                String line = cstmt.getString(1);
                status = cstmt.getInt(2);
                if (line != null && status == 0)
                {
                    //        System.out.println(line);
                    txt_area.append(line);
                    txt_area.append("\n");
                }
            }
        }catch(Exception e){
            JOptionPane.showMessageDialog(null, e);
        }
        
        
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        // TODO add your handling code here:
        try{
            String value = txt_state.getText();
            CallableStatement cstmt = conn.prepareCall("{call dbms_output.enable(32000) }");
            cstmt.execute();

            Statement stmt = conn.createStatement();
            String sql =
            "declare  \n" +
            " CURSOR c_id is select id, state, brand, model, year, price from cars where state = '"+value+"'; \n" +
            " TYPE c_list IS TABLE of cars.id%type INDEX BY binary_integer;  \n" +
            "  id_list c_list;  \n" +
            "TYPE c_state IS TABLE of cars.state%type INDEX BY binary_integer; \n"+
            "state_list c_state; \n"+
            "TYPE c_brand IS TABLE of cars.brand%type INDEX BY binary_integer; \n"+
            "brand_list c_brand; \n"+
            "TYPE c_model IS TABLE of cars.model%type INDEX BY binary_integer; \n"+
            "model_list c_model; \n"+
            "TYPE c_year IS TABLE of cars.year%type INDEX BY binary_integer; \n"+
            "year_list c_year; \n"+
            "TYPE c_price IS TABLE of cars.price%type INDEX BY binary_integer; \n"+
            "price_list c_price; \n"+
            "counter integer :=0; \n" +
            "begin  \n" +
            "    FOR n IN c_id LOOP  \n" +
            "    counter := counter +1;  \n" +
            "    id_list(counter) := n.id;  \n" +
            "    state_list(counter) := n.state; \n "+
            "    brand_list(counter) := n.brand; \n "+
            "    model_list(counter) := n.model; \n "+
            "    year_list(counter) := n.year; \n "+
            "    price_list(counter) := n.price; \n "+
            "    dbms_output.put_line('ID('||counter||'):  '||id_list(counter) || '    State:  ' || state_list(counter) || '    Brand: ' || brand_list(counter) || ' ' || model_list(counter) || '   Year: ' || year_list(counter) || '  Price: ' || price_list(counter));\n" +
            "  end loop; \n" +
            "end;";
            stmt.execute(sql);

            // retrieve the messages written with dbms_output
            cstmt = conn.prepareCall("{call dbms_output.get_line(?,?)}");
            cstmt.registerOutParameter(1,java.sql.Types.VARCHAR);
            cstmt.registerOutParameter(2,java.sql.Types.VARCHAR);

            int status = 0;
            while (status == 0)
            {
                cstmt.execute();
                String line = cstmt.getString(1);
                status = cstmt.getInt(2);
                if (line != null && status == 0)
                {
                    //        System.out.println(line);
                    txt_area.append(line);
                    txt_area.append("\n");
                }
            }
        }catch(Exception e){
            JOptionPane.showMessageDialog(null, e);
        }
    }//GEN-LAST:event_jButton7ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(info.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(info.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(info.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(info.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new info().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea txt_area;
    private javax.swing.JTextField txt_p1;
    private javax.swing.JTextField txt_p2;
    private javax.swing.JTextField txt_state;
    // End of variables declaration//GEN-END:variables
}
